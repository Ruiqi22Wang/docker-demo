# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14hRYjIfI7C4c3SDNfuuHEDotFGYfRZl6
"""

from sklearn.datasets import make_moons

data = make_moons(n_samples=1000, noise=0.35, random_state = 42)
x = data[0]; x1 = x[:,0]; x2 = x[:,1]
y = data[1]

import matplotlib.pyplot as plt

plt.scatter(x1[y==0], x2[y==0],c='red',label='class=0', marker = '.')
plt.scatter(x1[y==1], x2[y==1],c='green',label='class=1', marker= '.')
plt.xlabel('x1')
plt.ylabel('x2')
plt.title('Scatterplot of 1000 random samples')
plt.legend()
plt.show()

import numpy as np
import numpy.random as rd
from sklearn.neighbors import KNeighborsClassifier

sub1 = rd.choice(1000,100)
sub2 = rd.choice(1000,100)
sub3 = rd.choice(1000,100)
xsub1 = x[sub1]; ysub1 = y[sub1]
xsub2 = x[sub2]; ysub2 = y[sub2]
xsub3 = x[sub3]; ysub3 = y[sub3]


def knnresult(x,y,k):
    knn = KNeighborsClassifier(k)
    knn.fit(x,y)
    x1min = x[:,0].min()-1; x1max = x[:,0].max()+1
    x2min = x[:,1].min()-1; x2max = x[:,1].max()+1
    testx1, testx2 = np.meshgrid(np.arange(x1min,x1max,0.02), np.arange(x2min,x2max,0.02))
    testx = np.c_[testx1.ravel(), testx2.ravel()]
    pred = knn.predict(testx)
    return testx, pred
    
x1_1, y1_1 = knnresult(xsub1, ysub1, 1)
x1_25, y1_25 = knnresult(xsub1, ysub1, 25)
x1_50, y1_50 = knnresult(xsub1, ysub1, 50)

x2_1, y2_1 = knnresult(xsub2, ysub2, 1)
x2_25, y2_25 = knnresult(xsub2, ysub2, 25)
x2_50, y2_50 = knnresult(xsub2, ysub2, 50)

x3_1, y3_1 = knnresult(xsub3, ysub3, 1)
x3_25, y3_25 = knnresult(xsub3, ysub3, 25)
x3_50, y3_50 = knnresult(xsub3, ysub3, 50)


import matplotlib.pyplot as plt
from matplotlib import cm

def knnplot(loc, x, y, predx, predy, s, k):
    x1 = x[:,0]; x2 = x[:,1]
    predx1 = predx[:,0]; predx2 = predx[:,1]
    loc.scatter(predx1, predx2, predy, c = predy)
    loc.scatter(x1[y==0], x2[y==0], c = 'green', label = 'class=0', marker = '.')
    loc.scatter(x1[y==1], x2[y==1], c = 'orange', label = 'class=1',marker = '.')
    loc.legend()
    loc.set_title('Sample Subset{0} with K ={1}'.format(s,k))
    
fig, axs = plt.subplots(3, 3, figsize = (15, 12))
knnplot(axs[0,0], xsub1, ysub1, x1_1, y1_1, 1, 1)
knnplot(axs[0,1], xsub1, ysub1, x1_25, y1_25, 1, 25)
knnplot(axs[0,2], xsub1, ysub1, x1_50, y1_50, 1, 50)
knnplot(axs[1,0], xsub2, ysub2, x1_1, y1_1, 2, 1)
knnplot(axs[1,1], xsub2, ysub2, x1_25, y1_25, 2, 25)
knnplot(axs[1,2], xsub2, ysub2, x1_50, y1_50, 2, 50)
knnplot(axs[2,0], xsub3, ysub3, x1_1, y1_1, 3, 1)
knnplot(axs[2,1], xsub3, ysub3, x1_25, y1_25, 3, 25)
knnplot(axs[2,2], xsub3, ysub3, x1_50, y1_50, 3, 50)
fig.suptitle("Decision Boundaries across Different Sample Subsets and K values")
plt.savefig("decision-boundries.png")